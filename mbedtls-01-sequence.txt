    mbedtls_net_init( &server_fd );
    mbedtls_ssl_init( &ssl );
    mbedtls_ssl_config_init( &conf );
    mbedtls_x509_crt_init( &cacert );
    mbedtls_ctr_drbg_init( &ctr_drbg );
    
    // 0. Initialize the RNG and the session data
    // Seeding the random number generator...
    mbedtls_entropy_init( &entropy );
        mbedtls_ctr_drbg_seed
        
    // 1.1. Load the trusted CA
    // Loading the CA root certificate ...
    mbedtls_x509_crt_parse_file -> cacert
    
    //  1.2. Load own certificate and private key
    // (can be skipped if client authentication is not required)
    // Loading the client cert. and key...
    
    mbedtls_x509_crt_parse -> clicert from `mbedtls_test_cli_crt`
    mbedtls_pk_parse_key -> pkey from `mbedtls_test_cli_key`
    
    // 2. Start the connection
    mbedtls_net_connect with MBEDTLS_NET_PROTO_TCP/UDP -> server_fd
    mbedtls_net_set_nonblock/block( &server_fd );
    
    // 3. Setup stuff
    // Setting up the SSL/TLS structure..
    mbedtls_ssl_config_defaults( &conf,MBEDTLS_SSL_IS_CLIENT,
                    opt.transport, MBEDTLS_SSL_PRESET_DEFAULT ) 

    // PASSED
    // The default algorithms profile disables SHA-1
    // allow_sha1, 
    // - DFL_AUTH_MODE / mbedtls_ssl_conf_authmode
    // - MBEDTLS_SSL_PROTO_DTLS / mbedtls_ssl_conf_handshake_timeout
    
    mbedtls_ssl_conf_rng( &conf, mbedtls_ctr_drbg_random, &ctr_drbg );
    mbedtls_ssl_conf_dbg( &conf, my_debug, stdout );
    mbedtls_ssl_conf_read_timeout( &conf, opt.read_timeout );
    
    mbedtls_ssl_conf_session_tickets( &conf, opt.tickets ); // MBEDTLS_SSL_SESSION_TICKETS_ENABLED
    mbedtls_ssl_conf_renegotiation( &conf, opt.renegotiation );
    
    mbedtls_ssl_conf_ca_chain
    mbedtls_ssl_conf_own_cert
    
    mbedtls_ssl_setup( &ssl, &conf )
    mbedtls_ssl_set_hostname( &ssl, opt.server_name )
    
    if( opt.nbio == 2 )
        mbedtls_ssl_set_bio( &ssl, &server_fd, my_send, my_recv, NULL );
    else
        mbedtls_ssl_set_bio( &ssl, &server_fd, mbedtls_net_send, mbedtls_net_recv,
                             opt.nbio == 0 ? mbedtls_net_recv_timeout : NULL );

    mbedtls_ssl_set_timer_cb( &ssl, &timer, mbedtls_timing_set_delay,
                                            mbedtls_timing_get_delay );

    // 4. Handshake
    // Performing the SSL/TLS handshake...
    mbedtls_ssl_handshake( &ssl )
    
    mbedtls_ssl_get_record_expansion
    
    // 5. Verify the server certificate
    // Verifying peer X.509 certificate...
    mbedtls_ssl_get_verify_result( &ssl ) 
    
        mbedtls_ssl_get_peer_cert( &ssl )
        // Peer certificate information    ..
        mbedtls_x509_crt_info

    // 6. Write the GET request
    buf <- GET_REQUEST and GET_REQUEST_END, DFL_REQUEST_SIZE
    ( ret = mbedtls_ssl_write( &ssl, buf + written, len - written )
        
    // 7. Read the HTTP response
    mbedtls_ssl_read( &ssl, buf, len );
    
    // 8. Done, cleanly close the connection
    
    /* No error checking, the connection might be closed already */
    do ret = mbedtls_ssl_close_notify( &ssl );
    while( ret == MBEDTLS_ERR_SSL_WANT_WRITE );
    
     // 9. Reconnect?
     
     // Cleanup and exit
     mbedtls_net_free( &server_fd );
     mbedtls_x509_crt_free( &clicert );
     mbedtls_x509_crt_free( &cacert );
     mbedtls_pk_free( &pkey );
     mbedtls_ssl_session_free( &saved_session );
     mbedtls_ssl_free( &ssl );
     mbedtls_ssl_config_free( &conf );
     mbedtls_ctr_drbg_free( &ctr_drbg );
     mbedtls_entropy_free( &entropy );
     
     
    